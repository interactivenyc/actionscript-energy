package com.inyc.modules.playback {	import com.inyc.utils.ObjectUtils;		import com.allthingsmedia.schneiderelectric.KioskController;		import com.inyc.application.core.Controller;		import com.inyc.events.GenericDataEvent;		import com.inyc.application.core.Config;		import com.inyc.modules.Module;			import flash.events.TimerEvent;		import flash.utils.Timer;				import flash.events.SecurityErrorEvent;		import flash.events.IOErrorEvent;		import flash.net.URLRequest;		import flash.display.LoaderInfo;		import flash.display.Loader;		import flash.events.Event;		import flash.display.MovieClip;			/**	 * @author stevewarren	 */	public class VideoModule extends Module {		private var _videoPlayer:MovieClip;		private var _playerURL:String;		private var _configData:*;				private var _controller:KioskController;		private var timer:Timer;		private var videoController:*; //UISingleVideoController		public function VideoModule(data:Object) {			super(data);			log("constructor");		}				override protected function onAddedToStage(e:Event):void{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			log("onAddedToStage");			init();		}										override protected function init():void{			log("init");						_controller = KioskController.getInstance();						_configData = Config.getInstance().jsonData;			_playerURL = _configData.Config.contentPath + _configData.Config.videoPlayer;						var videoLoader:Loader = new Loader();			videoLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, videoPlayerLoaded);			videoLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			videoLoader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);						videoLoader.load(new URLRequest(_playerURL));					}				private function videoPlayerLoaded(e:Event){			log("videoPlayerLoaded");			//log("e.target:"+e.target);						var videoLoader:Loader = (e.target as LoaderInfo).loader;						log("videoLoader:"+videoLoader);			log(ObjectUtils.listProps(videoLoader));						videoLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, videoPlayerLoaded);			videoLoader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			videoLoader.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);							log("videoLoader.content:");			log(videoLoader.content);						_videoPlayer = videoLoader.content as MovieClip;			addChild(_videoPlayer);						var timePassed:int = Number(int(_controller.sequencer.getTimePassed()/1000));						log("video data:"+_data.attributes[1]);			_videoPlayer.initSingleVideo(_data.attributes[1]);			if(timePassed > 10)_videoPlayer.currentTime(timePassed);					}				private function playerStarted(e:GenericDataEvent) {			log("playerStarted");			log("_controller.sequencer:"+_controller.sequencer);						stage.removeEventListener("PLAYER_STARTED", playerStarted);						var timePassed:int = Number(int(_controller.sequencer.getTimePassed()/1000));			log("timePassed:"+timePassed);						log(e.data);						videoController = e.data.videoController //UISingleVideoController;						log("videoController");			log(videoController);						timer = new Timer(1000);			timer.addEventListener(TimerEvent.TIMER, checkPlayReallyStarted);			timer.start();						//videoController.currentTime(timePassed);		}				private function checkPlayReallyStarted(e:Event){			log("checkPlayReallyStarted");						if (videoController.getCurrentTime() > 0){				videoController.currentTime(timePassed);								timer.stop();				timer.removeEventListener(TimerEvent.TIMER, checkPlayReallyStarted);				timer = null;								var timePassed:int = Number(int(_controller.sequencer.getTimePassed()/1000));				log("timePassed:"+timePassed);			}		}						override public function startRemove(){			//override this in the module if needed			log("startRemove");			destroyVideoPlayer();		}				protected function onLoadComplete(e:Event):void{			log("onLoadComplete:"+e.target.url);		}				private function onIOError(e:IOErrorEvent):void{			log("onIOError:"+e.text);		}				private function onSecurityError(e:SecurityErrorEvent):void{			log("onSecurityError:"+e.text);		}								private function destroyVideoPlayer(){			log("DESTROY Video Player");			if(_videoPlayer!=null){				_videoPlayer.close();				if (_videoPlayer.parent) _videoPlayer.parent.removeChild(_videoPlayer);				_videoPlayer = null;			}		}										override protected function onRemovedFromStage(e:Event):void{			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			destroyVideoPlayer();		}					}}