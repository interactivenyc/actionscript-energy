package com.inyc.utils {	/**	 * @author stevewarren	 */	public class MathUtils {		private static var __id:Array;				public function MathUtils() {					}				//mine				public static function getRandom(min:Number, max:Number):Number {			var rnd:Number = min + (Math.random() * (max - min));			return rnd;		}				//From Friends				public static function sinD (angle:Number):Number {			return Math.sin(angle * (Math.PI/180));		}		public static function cosD (angle:Number):Number {			return Math.cos(angle * (Math.PI/180));		}		public static function tanD (angle:Number):Number {			return Math.tan(angle * (Math.PI/180));		}		public static function acosD (ratio):Number {			return Math.acos (ratio) * (180 / Math.PI);		}		public static function atan2d (y:Number, x:Number):Number {			return MathUtils.toDegrees(Math.atan2(y,x));		}		public static function toDegrees (theta:Number):Number {			return theta * (180 / Math.PI);		}		public static function toRadians  (theta:Number):Number {			return theta * (Math.PI / 180);		}		public static function angleOfLine (x1:Number, y1:Number, x2:Number, y2:Number):Number {			return fixAngle(MathUtils.atan2d(y2 - y1, x2 - x1));		}		public static function distance (x1:Number, y1:Number, x2:Number, y2:Number):Number {			var dx:Number = x2 - x1;			var dy:Number = y2 - y1;			return Math.sqrt(dx*dx + dy*dy);		}		public static function fixAngle(angle:Number):Number {			angle %= 360;			return angle < 0 ? angle + 360 : angle;		}		public static function cartPol(p:Object):Object {			var r:Number = Math.sqrt(p.x*p.x + p.y*p.y);			var t:Number = MathUtils.atan2d(p.y, p.x);			return {r:r, t:t};		}		public static function polCart(p:Object):Object {			var x:Number = p.r * MathUtils.cosD(p.t);			var y:Number = p.r * MathUtils.sinD(p.t);			return {x:x, y:y};		}		public static function limit(n:Number, a:Number, b:Number):Number {			return n < a ? a : n > b ? b : n;		}				public static function randRange(min:Number, max:Number, decPl:Number = 0):Number {			var rangeDiff:Number = (max-min)*Math.pow(10, decPl)+1;			var randVal:Number = Math.random()*rangeDiff;			randVal = Math.floor(randVal);			randVal /= Math.pow(10, decPl);			randVal += min;			return randVal;		}		public static function isNumber(val:Object):Boolean {			return typeof val == "number";		}		public static function isBetween(n:Number, a:Number, b:Number):Boolean {			return n >= a && n <= b ? true : false;		}		public static function isEven (n:Number):Boolean {			return n == 0 || (n % 2 == 0);		}		public static function isOdd (n:Number):Boolean {			return (n % 2 == 1);		}		public static function isDivisibleBy (n:Number, d:Number):Boolean {			return n % d == 0;		}		public static function roundTo(num:Number, dp:Number):Number {			var d:Number = Math.pow(10, dp);			return Math.round(num*(d+0.00000001))/d;		}		public static function round2(val:Number):Number {			return Math.round((val)*100)/100;		}		public static function setPositive(num:Number):Number {			return num <= 0 ? .001 : num;		}								/**		 * Checks if the passed-in Number {@code n} is even.		 *		 * @param n the Number to check		 * @return {@code true} if {@code n} is even else {@code false}		 */			public static function IsEven(n:Number):Boolean {			return (n%2 == 0);		}						/**		 * Checks if the passed-in Number {@code n} is odd.		 * 		 * @param n the Number to check		 * @return {@code true} if {@code n} is odd else {@code false}		 *///		public static function isOdd(n:Number):Boolean {//			return Boolean(n%2);//		}							/**		 * Checks if the passed-in number {@code n} is an Number.		 *		 * @param n the number to check		 * @return {@code true} if {@code n} is an Number else {@code false}		 */	//		public static function isNumber(n:Number):Boolean {//			return (n%1 == 0);//		}			/**		 * Checks if the passed-in number {@code n} is natural.		 *		 * @param n the number to check		 * @return {@code true} if {@code n} is natural else {@code false}		 */			public static function isNatural(n:Number):Boolean {			return (n >= 0 && n%1 == 0);		} 				/**		 * Checks if the passed-in number {@code n} is a prime.		 * 		 * <p>A prime number is a positive Number that has no positive Number divisors		 * other than 1 and itself.		 * 		 * @param n the number to check		 * @return {@code true} if {@code n} is a prime else {@code false}		 */			public static function isPrime(n:Number):Boolean {			if (n == 1 || (n>2 && n%2 == 0)) {				return false;			}			for (var i:Number = 2; i < n-1; i++) {				if (n%i == 0){					return false;				}			}			return true;		}					/**		 * Calculates the factorial of the passed-in number {@code n}.		 *		 * @param n the number to calculate the factorial of		 * @return the factorial of {@code n}		 */		public static function factorial(n:Number):Number {			if (n == 0) {				return 1;			}			var d = n.valueOf(); // Performance Speed up (this way the instance will not be used anymore			var i:Number = d-1;			while (i) {				d = d*i;				i--;			}			return d;		}					/**		 * Returns an array with all divisors of the passed-in number {@code n}		 * 		 * @param n the number to return the divisors of		 * @return an array that contains the divisors of {@code n}		 */		public static function getDivisors(n:Number):Array {			var divisors:Array = new Array();			for (var i:Number = 0; i <= n; i++) {				if (n%i == 0){					divisors.push(i);				}			}			return divisors;		}				//from Joey Lott		/*		public static function round(num:Number, dec:Number):Number {			dec = (dec == undefined) ? 1 : dec;			return Math.round(num/dec)*dec;		}		public static function floor(num:Number, dec:Number):Number {			dec = (dec == undefined) ? 1 : dec;			return Math.floor(num/dec)*dec;		}		public static function ceil(num:Number, dec:Number):Number {			dec = (dec == undefined) ? 1 : dec;			return Math.ceil(num/dec)*dec;		}		public static function random(min:Number, max:Number, dec:Number):Number {			dec = (dec == undefined) ? 1 : dec;			max = max == undefined ? 0 : max;			if (min > max) {				var tmp:Number = min;				min = max;				max = tmp;			}			var delta:Number = (max-min)+(1*dec);			var rand:Number = Math.random()*delta;			rand += min;			return MathUtils.floor(rand, dec);		}		public static function getUnique(pers:Boolean):Number {			if (__id == undefined) __id = [];			if (pers) {				var lsoIDs:SharedObject = SharedObject.getLocal("ids");				if (lsoIDs.data.ids != undefined) __id.concat(lsoIDs.data.ids);			}			var now:Date = new Date();			var nID:Number = now.getTime();			while (!isUnique(nID)) nID += MathUtils.random(now.getTime(), 2*now.getTime());			__id.push(nID);			if (pers) {				lsoIDs.data.ids = __id;				lsoIDs.flush();			}			return nID;		}		private static function isUnique(num:Number):Boolean {			for (var i = 0; i<__id.length; i++) {				if (__id[i] == num) return false;			}			return true;		}		*/			}			}