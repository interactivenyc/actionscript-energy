package com.inyc.asenergy.modules.drupal {
	
	import com.inyc.asenergy.events.GenericDataEvent;	import com.inyc.asenergy.modules.drupal.data.Node;	import com.inyc.asenergy.utils.debug.Logger;		import flash.events.EventDispatcher;	import flash.net.NetConnection;	import flash.net.ObjectEncoding;	import flash.net.Responder;
		/**	 * @author stevewarren	 */	public class DrupalServices extends EventDispatcher {		// Declare our variables		private var _baseURL:String;		private var _gateway:String;		protected var _sessionId:String = "";				// Declare our Drupal connection		protected var _drupal:NetConnection;				// Set up our responder with the callbacks.		private var _responder:Responder;				private var loadArray:Array;		private var nodeArray:Array;						public function DrupalServices(pBaseURL:String, pGateway:String){			_baseURL = pBaseURL;			_gateway = pGateway;						_drupal = new NetConnection();			_drupal.objectEncoding = ObjectEncoding.AMF3;					_responder = new Responder( onConnect, onError);		}								public function connect(){			_drupal.connect( _gateway );			_drupal.call("system.connect", _responder);		}				// Called when Drupal returns with a successful connection.		protected function onConnect(result:Object):void{			// Set our sessionId variable.			_sessionId = result.sessid;							log("We are connected!!!");			log("Session Id: " + _sessionId);							var e:GenericDataEvent = new GenericDataEvent(DrupalServiceEvents.CONNECTED, _sessionId);			dispatchEvent(e);		}								// Loads a Drupal node.		public function getNode(nid:int):void{			log("getNode() nid:"+nid);						var nodeResponse:Responder = new Responder( onNodeReceived, onError);			_drupal.call( "node.get", nodeResponse, _sessionId, nid );		}				// Called when Drupal returns with our node.		private function onNodeReceived(node:Object):void{			log("onNodeReceived()");						var drupalNode:Node = new Node(node);						var e:GenericDataEvent = new GenericDataEvent(DrupalServiceEvents.NODE_RECEIVED, drupalNode);			dispatchEvent(e);						checkNodeMultiple(node);					}				public function getNodeMultiple(idArray:Array){			loadArray = idArray;			nodeArray = new Array();			var nid:int = loadArray.pop();			getNode(nid);		}				private function checkNodeMultiple(node:Object){			log("checkNodeMultiple()");						if (loadArray){				nodeArray.push(node);				if (loadArray.length > 0){					var nid:int = loadArray.pop();					getNode(nid);				}else{					loadArray = null;					var e:GenericDataEvent = new GenericDataEvent(DrupalServiceEvents.ALL_NODES_RECEIVED, nodeArray);					dispatchEvent(e);				}			}		}				public function getView(viewName:String):void{			log("getViews() viewName:"+viewName);						var nodeResponse:Responder = new Responder( onViewReceived, onError);			_drupal.call( "views.getNodes", nodeResponse, _sessionId, viewName );		}				private function onViewReceived(view:Object){			var e:GenericDataEvent = new GenericDataEvent(DrupalServiceEvents.VIEW_RECEIVED, view);		   dispatchEvent(e);		}				// Called when an error occurs connecting to Drupal.		protected function onError(error:Object):void{			for each (var item in error) {				log(item);		   }		   var e:GenericDataEvent = new GenericDataEvent(DrupalServiceEvents.ERROR, error);		   dispatchEvent(e);		}						private function log(logItem:*,category:Array=null):void{			if (category==null) {				category=["DrupalServices"];			}			Logger.log(logItem,category,true);						}					}}