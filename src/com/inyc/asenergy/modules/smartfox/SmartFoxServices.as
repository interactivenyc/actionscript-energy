package com.inyc.asenergy.modules.smartfox {	import com.inyc.asenergy.utils.DateUtil;			import flash.events.TimerEvent;		import flash.utils.Timer;			import com.inyc.asenergy.core.Config;			import it.gotoandplay.smartfoxserver.SFSEvent;	import it.gotoandplay.smartfoxserver.SmartFoxClient;	import it.gotoandplay.smartfoxserver.data.Room;	import it.gotoandplay.smartfoxserver.data.User;		import com.inyc.asenergy.events.GenericDataEvent;	import com.inyc.asenergy.events.TrackingEvents;	import com.inyc.asenergy.utils.debug.Logger;		import flash.events.EventDispatcher;			/**	 * @author stevewarren	 */	public class SmartFoxServices extends EventDispatcher {		private var _config:Config;		//protected var _controller:AppController;		private var ip:String = "127.0.0.1";		private var port:Number = 9339;		//private var serverZone:String = "TradeShowBooth";		private var changingZones:Boolean = false;		private var _sfs:SmartFoxClient;				private var _username:String;		private var _user:User;		private var _room:Room;				private var _autoJoinComplete:Boolean = false;				private var _timeInitialized:Boolean = false;		private var _userKicked:Boolean = false;				private var connectTimer:Timer;						public function SmartFoxServices() {			log("CONSTRUCTOR");			_config = Config.getInstance();			//_controller = _config.controller;						_sfs = new SmartFoxClient();						addEventListeners();		}				private function addEventListeners(){			// Add event listeners			_sfs.addEventListener(SFSEvent.onConnection, onConnection);			_sfs.addEventListener(SFSEvent.onLogin, onLogin);			_sfs.addEventListener(SFSEvent.onLogout, onLogout);			_sfs.addEventListener(SFSEvent.onRoomListUpdate, onRoomListUpdate);			_sfs.addEventListener(SFSEvent.onUserCountChange, onUserCountChange);			_sfs.addEventListener(SFSEvent.onJoinRoom, onJoinRoom);			_sfs.addEventListener(SFSEvent.onJoinRoomError, onJoinRoomError);			_sfs.addEventListener(SFSEvent.onRoomAdded, onRoomAdded);			_sfs.addEventListener(SFSEvent.onRoomDeleted, onRoomDeleted);			_sfs.addEventListener(SFSEvent.onCreateRoomError, onCreateRoomError);			_sfs.addEventListener(SFSEvent.onPublicMessage, onPublicMessage);			_sfs.addEventListener(SFSEvent.onPrivateMessage, onPrivateMessage);			_sfs.addEventListener(SFSEvent.onUserEnterRoom, onUserEnterRoom);			_sfs.addEventListener(SFSEvent.onUserLeaveRoom, onUserLeaveRoom);			_sfs.addEventListener(SFSEvent.onConnectionLost, onConnectionLost);			_sfs.addEventListener(SFSEvent.onAdminMessage, onAdminMessage);			_sfs.addEventListener(SFSEvent.onExtensionResponse, onExtensionResponse);									_sfs.addEventListener(SFSEvent.onDebugMessage, logDebug);						_sfs.addEventListener(SFSEvent.onUserVariablesUpdate, onUserVariablesUpdate);			_sfs.addEventListener(SFSEvent.onUserVariablesUpdate, onRoomVariablesUpdate);		}				public function init(){			var timeString:String = DateUtil.getSimpleTimeDisplay(new Date());						log("init: "+timeString);			_config = Config.getInstance();						ip = _config.jsonData.Config.smartFoxURL;						addEventListeners();		}				public function connect(){			log("connect ip:"+ip+" port:"+port);						log("_sfs");			log(_sfs);						log("_sfs.connect is being called here - should see a trace from SmartFoxClient.connect() after this line");						_sfs.connect(ip, port);			//			//HARDCODING AN EVENT BECAUSE WE'RE NOT RECEIVING ONCONNECTION//			connectTimer = new Timer(1000, 0);//			connectTimer.addEventListener(TimerEvent.TIMER, onConnectTimerFinished);//			connectTimer.start();		}		//		private function onConnectTimerFinished(evt:TimerEvent){//			//HARDCODING AN EVENT BECAUSE WE'RE NOT RECEIVING ONCONNECTION//			log("onConnectTimerFinished");//			//			connectTimer.removeEventListener(TimerEvent.TIMER, onConnectTimerFinished);//			connectTimer.stop();//			connectTimer = null;//			//			var timeString:String = DateUtil.getSimpleTimeDisplay(new Date());//			var displayname:String = _config.jsonData.Config.userName + "_" + timeString;//						//			_sfs.login(_config.jsonData.Config.serverZone, displayname, "");//			log("_sfs.login zone:"+_config.jsonData.Config.serverZone+", displayname:"+displayname);//		}						private function onConnection(evt:SFSEvent){			var success:Boolean = evt.params.success;			log("onConnection");			log(evt.params);						//log(_config.userXML);						if (success){				//log("SMARTFOX CONNECTION SUCCESSFUL - LOGIN NEXT nick:"+_config.getUserName());				// Send login								var timeString:String = DateUtil.getSimpleTimeDisplay(new Date());			var displayname:String = _config.jsonData.Config.userName + "_" + timeString;									_sfs.login(_config.jsonData.Config.serverZone, displayname, "");			log("_sfs.login zone:"+_config.jsonData.Config.serverZone+", displayname:"+displayname);						}else{				log("SMARTFOX CONNECTION FAILURE");				//showDialog(_config.getString("SMARTFOX_ERROR") + ":" +evt.params.error);			}		}								/*		* Handler login event		*/		public function onLogin(evt:SFSEvent):void{			log("onLogin");			//log("evt.params:");			log(evt.params);						var ok:Boolean = evt.params.success;			_username = evt.params.name;						dispatchEvent(new GenericDataEvent(TrackingEvents.TRACKING_EVENT, {type:TrackingEvents.SFS_CONNECTED}));					}				public function onRoomListUpdate(evt:SFSEvent):void{			log("onRoomListUpdate");			//log(evt.params);			log(evt.params.roomList.length);						_sfs.autoJoin();					}						private function onExtensionResponse(evt:SFSEvent):void{			log("**** ON EXTENSION RESPONSE: ****");			//log("evt.params:");			log(evt.params);			var dataObj:Object = evt.params.dataObj;			var cmd:String = dataObj._cmd;			log("cmd:"+cmd);						switch(cmd){				case "userJoin":					//ONLY HAPPENS ONCE, TO INITIALIZE 					if (!_timeInitialized && dataObj.serverTimeString != null) {						//_config.controller.updateServerTime(dataObj.serverTimeString);						//_timeInitialized = true;					}										if (dataObj.createRoom == true) {						//log("user CAN create room");						//_config.createRoom = true;					}else{						//log("user CAN not create room");						//_config.createRoom = false;					}					break;				case "userKicked":					onUserKicked();					break;			}					}														public function setDefaultServerZone(zone:String){			log("*** setDefaultServerZone:"+zone);			_config.jsonData.Config.serverZone = zone;		}				public function setServerZone(zone:String){			log("*** setServerZone: "+zone);			if (_config.jsonData.Config.serverZone == zone){				//if the default zone has already been changed, because it's after 11pm EST, user doesn't need to change their default zone				return;			}			//this logout/login scheme will only happen for west coast users who arrive before 11pm EST			log("CHANGING ZONES");			_config.jsonData.Config.serverZone = zone;			changingZones = true;			_sfs.logout();		}						public function onLogout(evt:SFSEvent):void{			log("onLogout");			if (changingZones == true){				log("CHANGE TO ZONE:"+_config.jsonData.Config.serverZone);				changingZones = false;				_autoJoinComplete = false;				_sfs.login(_config.jsonData.Config.serverZone, _config.jsonData.Config.userName, "");			}		}								private function serverLog(msg:String):void{			log("CALLING SERVER FUNCTION");			var obj:Object = {msg:msg};			_sfs.sendXtMessage("CNTVParty", "trace", obj);	        		}														public function getAllRooms():Array{			log("getAllRooms");			return _sfs.getAllRooms();		}		public function showAllRooms():void{			log("showAllRooms");			var roomList:Array = getAllRooms();			//log("roomList.length:"+roomList.length);						var room:Room;			for (var i:int=0;i<roomList.length;i++){				room = roomList[i] as Room;				if (room){					if (room.getUserCount() > 0){						//log("room.getName():"+room.getName());						//log("room.getUserCount():"+room.getUserCount());						//log("room.getUserList().length:"+room.getUserList().length);					}else{						//log("room is empty");					}				}			}		}						public function joinRoom(room:String){			log("joinRoom:"+room);						_sfs.joinRoom(room);					}				/*		* Handler a join room event		*/		public function onJoinRoom(evt:SFSEvent):void{						_room = evt.params.room;			if (_user == null) initializeUser();						//log("room:"+_room.getName());			//log("user:"+_user);						showAllRooms();						var roomName:String = _room.getName();			log("onJoinRoom:"+roomName);						dispatchEvent(new GenericDataEvent(TrackingEvents.TRACKING_EVENT, {type:TrackingEvents.ROOM_ENTERED, roomName:roomName}));						if (roomName == "Lobby"){				//wait until the userlist updates before joining the lobby				if (_autoJoinComplete){					_sfs.addEventListener(SFSEvent.onUserCountChange, finishJoiningLobby);				}else{					log("first autojoin of Lobby has been completed");															log("_user:"+_user);					_autoJoinComplete = true;									}			}else{				//_controller.setViewByName("PartyRoomView");			}					}				public function initializeUser(){			log("*********************************");			log("initializeUser()");			log("*********************************");						var obj:Object;						if (_room){				log("\t room:"+_room.getName());				if (_sfs.myUserId){					log("\t\t _sfs.myUserId:"+_sfs.myUserId);					if (_room.getUser(_sfs.myUserId)){						log("\t\t\t _room.getUser(_sfs.myUserId).getName():"+_room.getUser(_sfs.myUserId).getName());						_user = _room.getUser(_sfs.myUserId);						obj = new Object();						obj.avatarURL = _config.jsonData.Config.avatarURL;						_sfs.setUserVariables(obj);					}				}			}						if (_user == null && _room != null) {				var userList:Array = _room.getUserList();				log("initializeUser() userList.length:"+userList.length);								for (var i=0;i<userList.length;i++){					var thisUser:User = userList[i] as User;					if (thisUser != null) {						if (thisUser.getName() == _username) {							log("thisUser.getName()"+thisUser.getName());														_user = thisUser;							_config.jsonData.Config.userID = _user.getId();							_config.jsonData.Config.userName = _user.getName();														obj = new Object();							obj.avatarURL = _config.jsonData.Config.avatarURL;							//obj.userDName = _config.userDName;							_sfs.setUserVariables(obj);						}					}				}			}						log("*********************************");				if (_user == null) {					log("initialize failed");				}else{					log("user is initialized: avatarURL:"+_user.getVariable("avatarURL"));									}			log("*********************************");		}				private function finishJoiningLobby(e:SFSEvent){			log("finishJoiningLobby");						_sfs.removeEventListener(SFSEvent.onUserCountChange, finishJoiningLobby);			//_controller.setViewByName("PartyListView");					}								/*		* Handle error while joining a room		*/		public function onJoinRoomError(evt:SFSEvent):void{			log("onJoinRoomError");			//log(evt.params);		}				/*		* Handle an error while creating a room		*/		public function onCreateRoomError(evt:SFSEvent):void{			log("onCreateRoomError");			//log(evt.params);		}				/*		* Handle a new room in the room list		*/		public function onRoomAdded(evt:SFSEvent):void{			log("onRoomAdded");			//log(evt.params);		}				/*		* Handle a room that was removed		*/		public function onRoomDeleted(evt:SFSEvent):void{			log("onRoomDeleted");			log(evt.params);		}				/*		* Handle a count change in one room of the zone		*/		public function onUserCountChange(evt:SFSEvent):void{			//log("onUserCountChange");			//log(evt.params);			//var room:Room = evt.params.room;			//log("room:"+room.getName()+", count:"+room.getUserCount());		}				/*		* Handle a public message		*/		public function onPublicMessage(evt:SFSEvent):void{			//log("onPublicMessage");			//log(evt.params);		}				/*		* Handle a private message		*/		public function onPrivateMessage(evt:SFSEvent):void{			//log("onPrivateMessage");			//log(evt.params);					}				/*		* Handle a new user that just entered the current room		*/		public function onUserEnterRoom(evt:SFSEvent):void{			//log("onUserEnterRoom");			//log(evt.params);			//log("User.name:"+evt.params.user.getName());		}				/*		* Handle a user who left the room		*/		public function onUserLeaveRoom(evt:SFSEvent):void{			//log("onUserLeaveRoom");			//log(evt.params);		} 				public function onAdminMessage(evt:SFSEvent){			log("onAdminMessage");			log(evt.params);						if (evt.params.message.toUpperCase().indexOf("KICK") > -1){				onUserKicked();			}		}				/*		* Handle disconnection		*/		public function onConnectionLost(evt:SFSEvent):void{			log("onConnectionLost");			log(evt.params);			if (_userKicked) return;			//_controller.showDialog(_config.getString("DROPPED_SFS_CONNECTION"));		}						public function onUserKicked(){			_userKicked = true;			//_controller.showDialog(_config.getString("USER_KICKED"));		}						private function onUserVariablesUpdate(evt:SFSEvent){			//log("onUserVariablesUpdate");			//log(evt.params);		}				private function onRoomVariablesUpdate(evt:SFSEvent){			//log("onRoomVariablesUpdate");			//log(evt.params);		}				public function get sfs():SmartFoxClient{			return _sfs;		}						private function logDebug(evt:SFSEvent):void{			//log(e.data.logItem);						var message = evt.params.message;			log(message);		}								protected function log(logItem:*, ...args):void{			var category = [this.toString().replace("[object ", "").replace("]", "")];			Logger.log(logItem,category,true);						if (args.length > 0){				Logger.log(args,[category[0]+"..."],true);        	}		}			}}