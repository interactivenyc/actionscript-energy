package com.inyc.asenergy.models {	import com.inyc.asenergy.utils.debug.Logger;		import com.inyc.asenergy.events.XMLLoaderEvent;			import flash.events.EventDispatcher;	import flash.display.Stage;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;		public class XMLLoader extends EventDispatcher 	{				protected var stage:        Stage;		protected var loader:       URLLoader;				private var refreshRate:    int = 0; //no refresh occurs. set the time until the next refresh, which dispatches an event REFRESH]				public var data:XML;		        public function XMLLoader() 		{			loader = new URLLoader();			loader.addEventListener(Event.COMPLETE, completeHandler, false, 0, true);			loader.addEventListener(Event.OPEN, openHandler, false, 0, true);			loader.addEventListener(ProgressEvent.PROGRESS, progressHandler, false, 0, true);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler, false, 0, true);			loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler, false, 0, true);			loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler, false, 0, true);        }				public function loadFile(fileUrl : String) : void 		{						var request:URLRequest = new URLRequest(fileUrl); //this needs to point to the queue, if there is one item then one item, either this has support for a queue or it does not			log("loading xml file: "+fileUrl);            try {                loader.load(request);            } catch (error:Error) {				//XMLLoaderEvent(pType:String, bubbles:Boolean = false, sData:XML = null, sMessage:String = null, sPercent:Number = 0) 				dispatchEvent(new XMLLoaderEvent(XMLLoaderEvent.ERROR, false));                log("Unable to load requested document.");            }		}        public function completeHandler(event : Event) : void 		{			log("xml loaded into URLLOADER", event.target);			var loaderResults:URLLoader = URLLoader(event.target);			try{				//var dataXML:XML = XML(loaderResults.data);				data = XML(loaderResults.data); //grab the data from this class upon COMPLETE				//dispatchEvent(new XMLLoaderEvent(XMLLoaderEvent.COMPLETE, false, dataXML)); //pass the xml data directly into the config or a data global class				dispatchEvent(new XMLLoaderEvent(XMLLoaderEvent.COMPLETE, false));			} catch (error:Error) {				log("Error: ", error.message);				dispatchEvent(new XMLLoaderEvent(XMLLoaderEvent.ERROR, false));				return;			}						//log("* * * * "+ data);        } 				public function close() : void 		{			try{				loader.close();			} catch (error:Error) {				//ignore any error			}		}        private function openHandler(event : Event) : void 		{            //log("openHandler: " + event);        }        private function progressHandler(event : ProgressEvent) : void 		{			var percent:Number = event.bytesTotal/event.bytesLoaded;			//XMLLoaderEvent(pType:String, bubbles:Boolean = false, sData:XML = null, sMessage:String = null, sPercent:Number = 0) 			var o:Object = {percent:percent};			dispatchEvent(new XMLLoaderEvent(XMLLoaderEvent.PROGRESS, false, o));            //log("progressHandler loaded: " + event.bytesLoaded + " total: " + event.bytesTotal);        }        private function securityErrorHandler(event : SecurityErrorEvent) : void 		{            log("securityErrorHandler: " + event);        }        private function httpStatusHandler(event : HTTPStatusEvent) : void 		{            //log("httpStatusHandler: " + event);            //log("XMLLoader httpStatusHandler: ");        }        private function ioErrorHandler(event : IOErrorEvent) : void 		{            log("ioErrorHandler: " + event);            dispatchEvent(new XMLLoaderEvent(XMLLoaderEvent.ERROR, false));        }                 protected function log(logItem:*, ...args):void{        				var category = [this.toString().replace("[object ", "").replace("]", "")];			Logger.log(logItem,category,true);						if (args){				Logger.log(args,[category[0]+"..."],true);        	}		}		    }}