package com.inyc.asenergy.components {	import flash.display.MovieClip;
	import flash.events.Event;
	import flash.events.MouseEvent;	

	/**	 * @author stevewarren	 */	public class ButtonComponent extends MovieClip {					private var btnLabel:String;		private var btnWidth:Number;				public var bg:MovieClip;		public var btnLabelMC:MovieClip;				private var _selected:Boolean = false;		private var _enabled:Boolean = true;		public static var EVENT_CLICK:String = "EVENT_CLICK";					public function ButtonComponent(){			//log("constructor");			init();		}						private function init(){			//log("init");			this.buttonMode = true;			addEventListener(MouseEvent.ROLL_OVER, onRollOver);			addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);			addEventListener(MouseEvent.MOUSE_UP, onMouseUp);			addEventListener(MouseEvent.ROLL_OUT, onRollOut);			addEventListener(MouseEvent.CLICK, onClick);						//log("init 2");						//gotoAndStop("off");			//if(!bg)bg = new MovieClip();			//bg.gotoAndStop("off");						//log("init 3");								}								[Inspectable(type="String", defaultValue="label" )] 		public function set label(value:String){			//log("set label:"+value);			btnLabel = value;			btnLabelMC.label.text = value;		}												[Inspectable(type="Number", defaultValue="82" )] 		override public function set width(value:Number):void{			//log("set width:"+value);			btnWidth = value;			bg.width = btnWidth;			btnLabelMC.label.width = btnWidth;		}										protected function onClick(e:MouseEvent):void{			if (!_selected && _enabled) {				log("onClick:" + e.target.name + ", _enabled:"+_enabled);				dispatchEvent(new Event(EVENT_CLICK));			}		}						protected function onRollOver(e:MouseEvent):void{			if (!_selected && _enabled) {				//log("onRollOver _selected:"+_selected);				gotoAndStop("over");				bg.gotoAndStop("over");				//setAllWidths();			}		}				protected function onRollOut(e:MouseEvent):void{			if (!_selected && _enabled) {				//log("onRollOut _selected:"+_selected);				gotoAndStop("off");				bg.gotoAndStop("off");				//setAllWidths();			}		}				protected function onMouseDown(e:MouseEvent):void{			if (!_selected && _enabled) {				//log("onMouseDown _selected:"+_selected);				gotoAndStop("down");				bg.gotoAndStop("down");				//setAllWidths();			}		} 				protected function onMouseUp(e:MouseEvent):void{			if (!_selected && _enabled) {				log("onMouseUp _enabled:"+_enabled);				gotoAndStop("over");				bg.gotoAndStop("over");				//setAllWidths();			}		} 				public function set selected(pSelected:Boolean):void {			_selected = pSelected;			if (_selected && _enabled) {				//log("selected = "+this.name);				//try down first, and if there is a selected state, then go there				gotoAndStop("down");				bg.gotoAndStop("down");				gotoAndStop("selected");				bg.gotoAndStop("selected");				buttonMode = false;			}else{				gotoAndStop("off");				bg.gotoAndStop("off");				buttonMode = true;			}			//setAllWidths();		}				public function get selected():Boolean {			return _selected;		}						[Inspectable(type="Boolean", defaultValue="true" )] 		override public function set enabled(pEnabled:Boolean):void{			super.enabled = pEnabled;			_enabled = pEnabled;						if (pEnabled){				useHandCursor = true;				buttonMode = true;				gotoAndStop("off");				bg.gotoAndStop("off");			}else{				useHandCursor = false;				buttonMode = false;				gotoAndStop("disabled");				bg.gotoAndStop("disabled");			}		}										protected function log(msg):void{			trace("[BasicButton] " + msg);		}											}}