package com.inyc.asenergy.core {	import com.adobe.serialization.json.JSON;	import com.inyc.asenergy.events.Events;	import com.inyc.asenergy.events.GenericDataEvent;	import com.inyc.asenergy.utils.debug.Logger;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.net.URLLoader;	import flash.net.URLRequest;		/**	 * @author stevewarren	 */	public class Config extends EventDispatcher {		private static var instance:Config;		private var _jsonData:*;				public static var ALLOW_DEBUG:Boolean = true;		public static var RUNNING_LOCAL:Boolean = false;		public static var USE_LOCAL_SERVICES:Boolean = false;		public function Config(e:SingletonEnforcer):void {			log("Constructor");		}						public static function getInstance():Config {			if (instance==null) {				instance = new Config(new SingletonEnforcer());			}			return instance;		}		public function loadConfig(url:String):void {			log("loadConfig url:"+url);			var req:URLRequest=new URLRequest(url);			var ldr:URLLoader = new URLLoader();			ldr.addEventListener(Event.COMPLETE,onConfigLoaded);			ldr.load(req);		}		private function onConfigLoaded(e:Event):void {			log("onConfigLoaded:");						_jsonData = JSON.decode(e.target.data);			dispatchEvent(new GenericDataEvent(Events.CONFIG_LOADED, {config:this}));		}								/*********************************************************************		 * Getter/Setter XML Values		 *********************************************************************/			public function get jsonData():* {			return _jsonData;		}						protected function log(logItem:*, ...args):void{			var category:Array = [this.toString().replace("[object ", "").replace("]", "")];			Logger.log(logItem,category,true);						if (args.length > 0){				Logger.log(args,[category[0]+"..."],true);        	}		}				}}internal class SingletonEnforcer {}